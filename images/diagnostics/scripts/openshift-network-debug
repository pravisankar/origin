#!/bin/sh
#
# This script is used by network diagnostics.
# Based on containerized/non-containerized openshift install,
# it sets the mount environment so that docker, openshift, iptables, etc.
# binaries are availble for network diagnostics.
#
set -o errexit
set -o nounset
set -o pipefail

node_rootfs=$1
shift
cmd="${@}"
node_image="openshift/node"
containerized=${OPENSHIFT_CONTAINERIZED:-"false"}

if [[ "${containerized}" == "true" ]]; then
    node_container_id=$(chroot "${node_rootfs}" docker ps | grep "${node_image}:" | cut -d' ' -f1)
    storage_driver=$(chroot "${node_rootfs}" docker inspect "${node_container_id}" | grep '"Driver"' | cut -d'"' -f4)

    device_reference=$(chroot "${node_rootfs}" docker inspect "${node_container_id}" | grep DeviceName | cut -d'-' -f4 | cut -d'"' -f1)

    # In containerized install, docker on the host is used by node container,
    # determine the node rootfs with respect to host so that pod within the node
    # container can mount this path to access the needed binaries.
    #
    # Add support for more storage drivers if needed
    if [[ "${storage_driver}" == "devicemapper" ]]; then
      chroot_path="/var/lib/docker/devicemapper/mnt/${device_reference}/rootfs"
    elif [[ "${storage_driver}" == "overlay" ]]; then
      chroot_path="/var/lib/docker/overlay/${device_reference}/merged"
    else
      echo "network diagnostics not supported for docker storage driver "${storage_driver}""
      exit 1
    fi

    docker_pid=$(chroot "${node_rootfs}" ps -aef | grep docker | grep daemon | awk '{print $2}')
    chroot "${node_rootfs}" nsenter -m -t "${docker_pid}" chroot "${chroot_path}" ${cmd}
else
    chroot "${node_rootfs}" ${cmd}
fi

